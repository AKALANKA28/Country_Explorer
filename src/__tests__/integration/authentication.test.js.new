// filepath: d:\Projects\af-2-IT22213730\src\__tests__\integration\authentication.test.js
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import { BrowserRouter } from "react-router-dom";
import App from "../../App";
import * as authService from "../../services/authService";

// Mock authentication service
jest.mock("../../services/authService");

// Mock API service
jest.mock("../../services/api", () => ({
  fetchAllCountries: jest.fn().mockResolvedValue([
    {
      name: { common: "Test Country" },
      cca3: "TST",
      capital: ["Test City"],
      region: "Test Region",
      population: 1000000,
      flags: { svg: "test.svg" },
    },
  ]),
  fetchCountryByName: jest.fn(),
  fetchCountriesByRegion: jest.fn(),
  fetchCountryByCode: jest.fn(),
  fetchCountriesByLanguage: jest.fn(),
}));

// Mock map components to avoid Leaflet issues in tests
jest.mock("../../components/countries/WorldMap", () => {
  return function MockWorldMap() {
    return <div data-testid="world-map">World Map Component</div>;
  };
});

jest.mock("../../components/countries/CountryLocationMap", () => {
  return function MockCountryLocationMap() {
    return <div data-testid="country-location-map">Country Location Map</div>;
  };
});

describe("Authentication Integration", () => {
  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();

    // Clear any stored auth state
    localStorage.clear();
  });

  test("user can register, login, and logout", async () => {
    // Mock successful registration
    const mockUser = { id: "123", email: "new@example.com", name: "new" };
    authService.registerUser.mockResolvedValueOnce(mockUser);

    // Mock successful login
    authService.loginUser.mockResolvedValueOnce(mockUser);

    render(
      <BrowserRouter>
        <App />
      </BrowserRouter>
    );

    // Wait for app to load
    await waitFor(() => {
      expect(screen.getByText("Login")).toBeInTheDocument();
    });

    // Go to register page
    fireEvent.click(screen.getByText("Register"));

    // Fill out registration form
    await waitFor(() => {
      expect(screen.getByText("Create your account")).toBeInTheDocument();
    });

    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: "new@example.com" },
    });

    fireEvent.change(screen.getByLabelText(/password/i), {
      target: { value: "password123" },
    });

    // If your register form has a name field, add this:
    fireEvent.change(screen.getByLabelText(/name/i), {
      target: { value: "Test User" },
    });

    // Submit registration form
    fireEvent.click(screen.getByRole("button", { name: /sign up/i }));

    // Should be redirected to home page and logged in
    await waitFor(() => {
      expect(screen.getByText("Log Out")).toBeInTheDocument();
    });

    // Log out
    fireEvent.click(screen.getByText("Log Out"));

    // Should be logged out
    await waitFor(() => {
      expect(screen.getByText("Login")).toBeInTheDocument();
    });

    // Log in again
    fireEvent.click(screen.getByText("Login"));

    // Fill out login form
    await waitFor(() => {
      expect(screen.getByText("Sign in to your account")).toBeInTheDocument();
    });

    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: "new@example.com" },
    });

    fireEvent.change(screen.getByLabelText(/password/i), {
      target: { value: "password123" },
    });

    // Submit login form
    fireEvent.click(screen.getByRole("button", { name: /sign in/i }));

    // Should be redirected to home page and logged in
    await waitFor(() => {
      expect(screen.getByText("Log Out")).toBeInTheDocument();
    });
  });

  test("displays error messages for authentication failures", async () => {
    // Mock failed login
    authService.loginUser.mockRejectedValueOnce(
      new Error("Invalid email or password")
    );

    render(
      <BrowserRouter>
        <App />
      </BrowserRouter>
    );

    // Go to login page
    await waitFor(() => {
      expect(screen.getByText("Login")).toBeInTheDocument();
    });

    fireEvent.click(screen.getByText("Login"));

    // Fill out login form
    await waitFor(() => {
      expect(screen.getByText("Sign in to your account")).toBeInTheDocument();
    });

    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: "test@example.com" },
    });

    fireEvent.change(screen.getByLabelText(/password/i), {
      target: { value: "wrong-password" },
    });

    // Submit login form
    fireEvent.click(screen.getByRole("button", { name: /sign in/i }));

    // Should display error message
    await waitFor(() => {
      expect(screen.getByText("Invalid email or password")).toBeInTheDocument();
    });
  });
  
  test("redirects protected routes to login when not authenticated", async () => {
    render(
      <BrowserRouter>
        <App />
      </BrowserRouter>
    );

    // Wait for app to load
    await waitFor(() => {
      expect(screen.getByText("Login")).toBeInTheDocument();
    });

    // Try to navigate to favorites (protected route)
    window.history.pushState({}, "", "/favorites");
    fireEvent.popState(window);

    // Should be redirected to login
    await waitFor(() => {
      expect(screen.getByText("Sign in to your account")).toBeInTheDocument();
    });
  });
});
